/**
Bouncing Balls
https://www.khanacademy.org/computer-programming/bouncing-balls/6704155495464960

Bouncing Balls 2
https://www.khanacademy.org/computer-programming/bouncing-balls-2/6170382110523392

Bouncing Balls 3
https://www.khanacademy.org/computer-programming/bouncing-balls-3/5786006401024000

Bouncing Balls War
https://www.khanacademy.org/computer-programming/bouncing-balls-war/6629686556983296
**/
noStroke();
var animals=[];
var gravity=new PVector(0,0);
var bounce=1;
var fcolor=color(255, 255, 255);
var teams=["red","blue","green"];
var teamColors={"red":[255,0,0],"green":[0,255,0],"blue":[0,0,255]};
var randSign=function(){
    return floor(random(0,2))*2-1;
};
var reScale=function(vector,scale){
    var v=new PVector(vector.x,vector.y);
    v.normalize();
    v.mult(scale);
    return v;
};
var rotateVector=function(vector,angle){
    var x=vector.x;
    var y=vector.y;
    var nVector=new PVector(0,0);
    nVector.x=x*cos(angle)-y*sin(angle);
    nVector.y=y*cos(angle)+x*sin(angle);
    return nVector;
};
var makeMoveState=function(){
    var velocity=new PVector(1.5,0);
    //println(velocity);
    return [new PVector(random(0,width),random(0,height)),rotateVector(velocity,random(0,360))];
};
/*var mutate=function(gene){
    var newGene=Object.assign(gene,{});
    var cMutations=10;
    newGene.r=constrain(newGene.r+random(-cMutations,cMutations),0,255);
    newGene.g=constrain(newGene.g+random(-cMutations,cMutations),0,255);
    newGene.b=constrain(newGene.b+random(-cMutations,cMutations),0,255);
    return newGene;
};
var cost=function(gene){
    return gene.size/10+gene.g/10;
};*/
var Grid=function(animals,size){
    this.animals=animals;
    this.size=size;
    this.squareSize=width/size;
    this.grid=[];
    for(var i=0; i<this.size; i++){
        var row=[];
        for(var j=0; j<this.size; j++){
            row.push([]);
        }
        this.grid.push(row);
    }
};
Grid.prototype.clear=function(){
    this.grid=[];
    for(var i=0; i<this.size; i++){
        var row=[];
        for(var j=0; j<this.size; j++){
            row.push([]);
        }
        this.grid.push(row);
    }
};
Grid.prototype.display=function(){
    for(var x=0; x<width; x+=this.squareSize){
        line(x,0,x,400);
    }
    for(var y=0; y<height; y+=this.squareSize){
        line(0,y,400,y);
    }
};
Grid.prototype.fill=function(animals){
    for(var i=animals.length-1; i>=0; i--){
        var animal=animals[i];
        this.place(animal);
    }
};
Grid.prototype.place=function(animal){
    var leftSide=floor((animal.position.x-animal.size/2)/this.squareSize);
    var rightSide=floor((animal.position.x+animal.size/2)/this.squareSize);
    var upSide=floor((animal.position.y-animal.size/2)/this.squareSize);
    var downSide=floor((animal.position.y+animal.size/2)/this.squareSize);
    leftSide= leftSide<0?0:leftSide;
    rightSide= rightSide>this.size-1?0:rightSide;
    upSide= upSide<0?0:upSide;
    downSide= downSide>this.size-1?0:downSide;
    //println(this.squareSize);
    this.grid[leftSide][upSide].push(animal);
    if(leftSide!==rightSide){
        this.grid[rightSide][upSide].push(animal);
        if(upSide!==downSide){
            this.grid[leftSide][downSide].push(animal);
            this.grid[rightSide][downSide].push(animal);
        }
    } else if(upSide!==downSide){
        this.grid[leftSide][downSide].push(animal);
    }
    
};
Grid.prototype.collide=function(){
    for(var i=0; i<this.size; i++){
        for(var j=0; j<this.size; j++){
            var square=this.grid[i][j];
            for(var k=square.length-1; k>=0; k--){
                var ball1=square[k];
                for(var l=square.length-1; l>k; l--){
                    var ball2=square[l];
                    if(dist(ball1.position.x,ball1.position.y,ball2.position.x,ball2.position.y)<=(ball1.size+ball2.size)/2){
                        if(!ball1.eat(ball2)){
                            ball2.eat(ball1);
                        }
                    }
                }
            }
        }
    }
};
var Ball=function(moveState,colorState,size){
    this.position=moveState[0];
    this.velocity=moveState[1];
    this.size=size;
    this.mass=size;
    this.r=colorState[0];
    this.g=colorState[1];
    this.b=colorState[2];
    this.life=true;
    this.breaker=false;
    
    this.team=teams[floor(random(0,3))];
    /*this.r=(this.team==="red")*255;
    this.g=(this.team==="green")*255;
    this.b=(this.team==="blue")*255;*/
};
Ball.prototype.checkEdgesBounce=function(){ 
    if(this.position.x<this.size/2){  
        this.velocity.x*=-bounce;
        this.position.x=this.size/2;
    } else if(this.position.x>width-this.size/2){
        this.velocity.x*=-bounce;
        this.position.x=width-this.size/2;
    }
    if(this.position.y<this.size/2){
        this.velocity.y*=-bounce;
        this.position.y=this.size/2;
    } else if(this.position.y>height-this.size/2){
        this.velocity.y*=-bounce;
        this.position.y=height-this.size/2;
    }
};
Ball.prototype.getColor=function(){
    return [this.r,this.g,this.b];
};
Ball.prototype.setColor=function(color){
    this.r=color[0];
    this.g=color[1];
    this.b=color[2];
};
Ball.prototype.getMoveState=function(){
    return [this.position,this.velocity];
};
Ball.prototype.eat=function(other){
    //if(true){return true;}
    var diff=PVector.sub(this.position,other.position);
    var angle=atan2(diff.y,diff.x);
    var overlap=(this.size+other.size)/2-diff.mag();
    //println(overlap);
    if(overlap>0){this.position.add(reScale(diff,overlap/2));other.position.sub(reScale(diff,overlap/2));}
    var thisVel2=rotateVector(this.velocity,-angle);
    var otherVel2=rotateVector(other.velocity,-angle);
    var tx=thisVel2.x;
    var ox=otherVel2.x;
    /*thisVel2.x=ox;
    otherVel2.x=tx;*/
    var cm=this.mass+other.mass;
    var m1=this.mass/cm;
    var m2=other.mass/cm;
    thisVel2.x=(m1-m2)*tx+2*m2*ox;
    otherVel2.x=(m2-m1)*ox+2*m1*tx;
    
    this.velocity=rotateVector(thisVel2,angle);
    other.velocity=rotateVector(otherVel2,angle);
    /*{var r=(this.r+other.r)/2;
    this.r=r;
    other.r=r;
    var g=(this.g+other.g)/2;
    this.g=g;
    other.g=g;
    var b=(this.b+other.b)/2;
    this.b=b;
    other.b=b;}*/
    /*if(this.size>other.size && this.breaker){
        other.life=false;
    }
    else if(this.size<other.size && other.breaker){
        this.life=false;
    }*/
    /*if(this.team===other.team){
        if(this.size>other.size){
            this.size-=1;
            other.size+=1;
        }else if(this.size<other.size){
            this.size+=1;
            other.size-=1;
        }
    }else*/ 
    if(this.size>other.size){
        other.team=this.team;
        other.setColor(this.getColor());
        this.size-=1;
        other.size+=1;
    } else if(this.size<other.size){
        this.team=other.team; 
        this.setColor(other.getColor());
        this.size+=1;
        other.size-=1;
    }
    return true;
};
Ball.prototype.display= function() {
    //this.setColor(teamColors[this.team]);
    if(this.breaker){
        fill(255-this.r, 255-this.g, 255-this.b,64);
        ellipse(this.position.x,this.position.y,this.size+3,this.size+3);
    }
    fill(this.r,this.g,this.b);
    ellipse(this.position.x,this.position.y,this.size,this.size);
    fill(fcolor);
};

Ball.prototype.update=function() {
    this.mass=this.size;
    this.position.add(this.velocity);
    this.velocity.add(gravity);
    this.checkEdgesBounce();
    this.display();
};
Ball.prototype.hide=function() {
    fill(fcolor);
    ellipse(this.position.x,this.position.y,this.size+1,this.size+1);
};
/*var Animal=function(gene,moveState){
    this.size=gene.size;
    this.energy=gene.energy;
    this.maxSize=gene.maxSize;
    this.gene=gene;
    this.position=moveState[0];
    this.velocity=PVector.normalize(moveState[1]);
    this.velocity.mult(gene.speed);
    this.color=color(gene.r,gene.g,gene.b);
    this.life=true;
};

Animal.prototype.display= function() {
    fill(this.color);
    ellipse(this.position.x,this.position.y,this.size,this.size);
    fill(fcolor);
};
Animal.prototype.update=function(){
    this.position.add(this.velocity);
    this.size-=this.gene.speed*sq(this.size)/10000;
    this.checkEdgesBounce();
    this.display();
    this.size+=this.gene.g/200;
    //this.color=color(0, 0, 255);
    if(this.size>=this.maxSize){
        this.reproduce();
    }
    if(this.size<=0){
        this.life=false;
    }
};
Animal.prototype.checkEdgesBounce=function(){ 
    if(this.position.x<this.size/2){  
        this.velocity.x*=-1;
        this.position.x=this.size/2;
    } else if(this.position.x>width-this.size/2){
        this.velocity.x*=-1;
        this.position.x=width-this.size/2;
    }
    if(this.position.y<this.size/2){
        this.velocity.y*=-1;
        this.position.y=this.size/2;
    } else if(this.position.y>height-this.size/2){
        this.velocity.y*=-1;
        this.position.y=height-this.size/2;
    }
};
Animal.prototype.eat=function(other){
    if(this.size>other.size && other.life){
        other.life=false;
        this.size+=other.size/9;
        return true;
    }
    return false;
};
Animal.prototype.reproduce=function(){
    var newGene=mutate(this.gene);
    var eCost=cost(newGene);
    if(eCost>this.size-this.gene.size){
        this.size-=eCost;
        var animal=new Animal(newGene,makeMoveState());
        animals.push(animal);
    }
};
/*for(var i=0; i<200; i++){
    var s=10+random(-1,1);
    var animal=new Animal({size:s,energy:5,speed:2,r:0,g:0,b:255,maxSize:s+3},makeMoveState());
    animals.push(animal);
}*/
for(var i=0; i<50; i++){
    var r=random(0,255);var g=random(0,255);var b=random(0,255);
    /*var c=255;
    var d=r+g+b-c;
    r-=d/3;g-=d/3;b-=d/3;*/
    var ball= new Ball(makeMoveState(),[r,g,b],random(10,30));
    animals.push(ball);
}
/*var b=new Ball(makeMoveState(),[0,128,255],20);
b.mass=1000;
animals.push(b);*/
var grid=new Grid(animals,1);
var s=0;
var draw= function() {
    background(255, 255, 255);
    grid.clear();
    //grid.display();
    grid.fill(animals);
    grid.collide();
    for(var i=animals.length-1; i>=0; i--){
        var animal=animals[i];
        animal.update();
        if(!animal.life || ball.size<=0){
            animals.splice(i,1);
            //var ball= new Ball(animal.getMoveState(),animal.getColor(),animal.size-1);
            /*if(ball.size>0){
                animals.push(ball);
            }*/
        }
    }
    fill(0, 0, 0);
    text(animals.length,0,10);
    if(s<0){s=0;}
    text(s,0,400);
    text(bounce,384,10);
};
var l=true;
mouseClicked=function(){
    if(mouseButton===RIGHT){
        return;
    }
    var r=random(0,255);var g=random(0,255);var b=random(0,255);
    /*var c=255;
    var d=r+g+b-c;
    r-=d/3;g-=d/3;b-=d/3;*/
    var state=makeMoveState();
    state[0].x=mouseX;
    state[0].y=mouseY;
    var ball= new Ball(state,[r,g,b],s||random(10,30));
    //ball.breaker=true;
    animals.push(ball);
    ball.display();
};
keyPressed=function(){
    var r=floor(random(animals.length));
    if(keyCode===DOWN){
        animals[r].hide(); 
        animals.splice(r,1);
    }
    if(keyCode===UP){
        var b=new Ball(makeMoveState(),animals[r].getColor(),animals[r].size);
        animals.push(b);
        b.display();
    }
    if(keyCode===32){
        if(l){noLoop();}else{loop();}
        l=!l;
    }
    if(keyCode===RIGHT){
        s+=1;
    }
    if(keyCode===LEFT){
        s-=1;
    }
    if(keyCode===66){
        bounce+=0.1;
    }
    if(keyCode===67){
        bounce-=0.1;
    }
    //println(keyCode);
};
